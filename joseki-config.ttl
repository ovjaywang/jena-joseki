# This file is written in N3 / Turtle

@prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd:    <http://www.w3.org/2001/XMLSchema#> .

@prefix module: <http://joseki.org/2003/06/module#> .
@prefix joseki: <http://joseki.org/2005/06/configuration#> .
@prefix ql:     <http://jena.hpl.hp.com/2003/07/query/> .

@prefix jms:    <http://jena.hpl.hp.com/2003/08/jms#> .

## --------------------------------------------------------------
## This file is written in N3 / Turtle
## It is an RDF graph - order of RDF triples does not matter
## to the machine but it does help people who need to edit this file.

## Note: adding rdfs:label to blank nodes will cause Joseki 
## to print that in log messages.

## Structure:
## 
## []  rdf:type joseki:Server 
##     joseki:service
##        rdf:type joseki:ServicePoint
##        joseki:serviceRef    service URI = server + sevice Ref
##
##        # Data part
##        joseki:dataset
## 
##        # Service part
##        joseki:processor
##           joseki:queryLang
##           module:implementation
##              module:className <java:....>
        
## Normally, the details of the processor are hidden in a standard defintion
## The dataset can be described elsewhere as well.

## []  rdf:type joseki:Server 
##     joseki:service
##        rdf:type joseki:ServicePoint
##       joseki:service
##        # Data part
##        joseki:dataset
##          Description of dataset
##        # Service part
##        joseki:processor joseki:ServiceSPARQL ;



## --------------------------------------------------------------
## About this configuration

<> joseki:include
    # Include other configuration information
    <joseki-def-proc.n3> # , <joseki-def-??.n3>
    .

## --------------------------------------------------------------
## About this server

[]  rdf:type joseki:Server ;
    joseki:serverDebug   "true" ;

    # Associate service endpoints with a server

    # Service 1 - general purpose SPARQL processor, no dataset
    joseki:service
      [ 
        rdf:type joseki:ServicePoint ;
        rdfs:label "service point" ;

        joseki:serviceRef         "sparql" ;
        joseki:processor joseki:ProcessorSPARQL ;
      ] ;

    # Service 2 - SPARQL processor only handling a given dataset.
    joseki:service
      [ rdf:type    joseki:ServicePoint ;
        rdfs:label  "SPARQL on fixed dataset" ;
        joseki:serviceRef         "query" ;
        # dataset part
        joseki:dataset       _:ds1 ;

        # Service part.
        joseki:processor    joseki:ProcessorSPARQL_FixedDS ;
      ] ;

    # Service 3 - example - all inline.
    joseki:service
      [ rdf:type    joseki:ServicePoint ;
        rdfs:label  "Inline example" ;
        joseki:serviceRef         "example" ;
        joseki:dataset
          [ joseki:defaultGraph    _:model1 ; ] ;
        joseki:processor
          [ module:implementation [ module:className <java:module> ] ] ;
      ] ;
    .

## --------------------------------------------------------------
## Graphs available (Jena calls them Models)

## ---- A model, with RDF read from a file 
## (syntax determined by file extenstion - defaults to RDF/XML)

_:model  rdf:type jms:DefaultModelSpec ;
    rdfs:label "Model(plain)" ;
    jms:loadWith  <file:D.ttl> .

_:model1  rdf:type jms:DefaultModelSpec ;
    rdfs:label "Model-1" ;
    jms:loadWith  <file:D1.ttl> .


# Abbreviated forms (rewrite /CONSTRUCT then query again for model spec form):
##_:model2    joseki:attachedModel        <file:Data/empty.nt> ;
_:model2 rdf:type jms:DefaultModelSpec ;
    rdfs:label "Model-2" ;
    jms:loadWith  <file:D2.ttl> .


## --------------------------------------------------------------
## Datasets

_:ds1   rdf:type joseki:RDFDataSet ;
    joseki:defaultGraph    _:model1 ;
    rdfs:label "Dataset _:ds1" ;
    joseki:namedGraph
        [ joseki:graphName      <http://example.org/name1> ;
          joseki:graphData      _:model1 ] ;
    # Could use the location manager and have the named thing only
    # Can't have two names for one graph?
    joseki:namedGraph
        [ joseki:graphName      <http://example.org/name2> ;
          joseki:graphData  _:model2 
        ] ;
    ## Short versions?

    .

_:ds2   rdf:type joseki:RDFDataSet ;
    joseki:defaultGraph _:model1 ;
    rdfs:label "Dataset of one model" ;
    .

## What about Dataset builders that are external code?
## i.e. adapters to other sources of RDF
    

## --------------------------------------------------------------
## Processors
## Usually, this section is empty because only standard
## processors are used via inclusion of common definitions.

## --------------------------------------------------------------
## Services
## A number of service endpoints.
## A service endpoint also includes parameters used to
## config processors.

# ----- definitions --------------------------------------------------

joseki:ProcessorSPARQL
    rdfs:label "General SPARQL processor" ;
    rdf:type joseki:Processor ;
    module:implementation joseki:ImplSPARQL ;

    # Parameters - this processor processes FROM/FROM NAMED
    joseki:allowExplicitDataset       "true"^^xsd:boolean ;
    joseki:allowWebLoading            "true"^^xsd:boolean ;

    # Names we answer to (optional request parameters)
    joseki:queryOperationName "SPARQL" ;
    joseki:queryOperationName "sparql" ;
    joseki:queryOperationName ql:SPARQL ;
    .

joseki:ProcessorSPARQL_FixedDS
    rdfs:label "SPARQL processor for fixed datasets" ;
    rdf:type joseki:Processor ;
    module:implementation joseki:ImplSPARQL ;

    # This processor does not accept queries with FROM/FROM NAMED
    joseki:allowExplicitDataset       "false"^^xsd:boolean ;
    joseki:allowWebLoading            "false"^^xsd:boolean ;
    .



joseki:ImplSPARQL
    rdf:type   joseki:ServiceImpl ;
    module:className
        <java:joseki3.server.processors.SPARQL> .
    
joseki:ProcessorGet
    rdf:type joseki:Service ;
    joseki:queryOperationName "GET" ; 
    module:implementation joseki:ImplGET .

joseki:ImplGET
     rdf:type   joseki:ServiceImpl ;
     module:className
         <java:org.joseki.server.processors.QueryProcessorGET> ;
     .

# Local Variables:
# tab-width: 4
# indent-tabs-mode: nil
# End:

# This file is written in N3 / Turtle

## TEST version
## May not work straight out of CVS because of dependences on external systems
## like database stored models or external reasoners.


@prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd:    <http://www.w3.org/2001/XMLSchema#> .

@prefix module: <http://joseki.org/2003/06/module#> .
@prefix joseki: <http://joseki.org/2005/06/configuration#> .
@prefix ql:     <http://jena.hpl.hp.com/2003/07/query/> .

@prefix jms:    <http://jena.hpl.hp.com/2003/08/jms#> .

## --------------------------------------------------------------

<> joseki:include <file:joseki-defs.ttl> .
    # Include other configuration information
 
## --------------------------------------------------------------

[]  rdf:type joseki:Server ;
    joseki:serverDebug   "true" ;
    .

## --------------------------------------------------------------
## ---- Service 1 - general purpose SPARQL processor, no dataset

# Expects the request to specify the dataset (either by parameters 
# in the protocol request or in the query itself).

[]
    rdf:type            joseki:Service ;
    rdfs:label          "service point" ;
    joseki:serviceRef   "sparql" ;
    joseki:processor    joseki:ProcessorSPARQL ;
    .

## ---- Service - SPARQL processor only handling a given dataset
[]
    rdf:type            joseki:Service ;
    rdfs:label          "SPARQL on the books model" ;
    joseki:serviceRef   "books" ;
    joseki:dataset      _:books ;
    joseki:processor    joseki:ProcessorSPARQL_FixedDS ;
    .

## ---- Axis/SAOP testing
[]
    rdf:type            joseki:Service ;
    rdfs:label          "SPARQL/SOAP testing" ;
    joseki:serviceRef   "sparql-query" ;
    joseki:dataset      _:books ;
    joseki:processor    joseki:ProcessorSPARQL_FixedDS ;
    .

## ---- Database-backed

[]
    rdf:type            joseki:Service ;
    rdfs:label          "SPARQL on the books model in a database" ;
    joseki:serviceRef   "books-db" ;
    joseki:dataset      _:books-db ;
    joseki:processor    joseki:ProcessorSPARQL_FixedDS ;
    .

## ---- With a reasoner

[]
    rdf:type            joseki:Service ;
    rdfs:label          "SPARQL/RDFS testing" ;
    joseki:serviceRef   "rdfs" ;
    joseki:dataset      joseki:ProcessorSPARQL_FixedDS ;
    .
        
## --------------------------------------------------------------
## Datasets

_:ds1   rdf:type joseki:RDFDataSet ;
    joseki:defaultGraph    _:model1 ;
    rdfs:label "Dataset _:ds1" ;
    joseki:namedGraph
        [ joseki:graphName      <http://example.org/name1> ;
          joseki:graphData      _:model1 ] ;
    # Could use the location manager and have the named thing only
    # Can't have two names for one graph?
    joseki:namedGraph
        [ joseki:graphName      <http://example.org/name2> ;
          joseki:graphData  _:model2 
        ] ;
    ## Short versions?
    .

# A dataset of one model as the default graph
_:books   rdf:type joseki:RDFDataSet ;
    rdfs:label "Books" ;
   joseki:defaultGraph
      [ rdfs:label "books.n3" ;
        jms:loadWith  <file:Data/books.n3> ] ;
    .

_:books-db   rdf:type joseki:RDFDataSet ;
    rdfs:label "Books-DB" ;
    joseki:defaultGraph
        [ rdfs:label        "books-db" ;
          jms:modelName     "books" ;
          jms:maker 
            [ jms:reificationMode jms:rsMinimal ;
              jms:hasConnection [
                  jms:dbURL        <jdbc:mysql://localhost/data?autoReconnect=true> ;
                  jms:dbUser       "user" ;
                  jms:dbPassword   "password" ;
                  jms:dbType       "MySQL" ;
                  jms:dbClass      "com.mysql.jdbc.Driver" ;
                ] ;
            ];
        ] ;
    .


## --------------------------------------------------------------

_:model  rdf:type jms:DefaultModelSpec ;
    rdfs:label "Model(plain)" ;
    jms:loadWith  <file:D.ttl> .

_:model1  rdf:type jms:DefaultModelSpec ;
    rdfs:label "Model-1" ;
    jms:loadWith  <file:D1.ttl> .

_:model2 rdf:type jms:DefaultModelSpec ;
    rdfs:label "Model-2" ;
    jms:loadWith  <file:D2.ttl> .


_:modelRDFS rdf:type jms:InfModelSpec ;
     jms:loadWith  <file:D.ttl> ;
     jms:reasonsWith
        [ jms:reasoner r:RDFSExptRuleReasoner ;
          jms:schemaURL <file:C.ttl>  
        ] .


## Examples of RDFS and OWL inference models

## --------------------------------------------------------------
## Processors
## Usually, this section is empty because only standard
## processors are used via inclusion of common definitions.



## --------------------------------------------------------------

# Local Variables:
# tab-width: 4
# indent-tabs-mode: nil
# End:

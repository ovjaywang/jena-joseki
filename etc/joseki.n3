@prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix module: <http://joseki.org/2003/06/module#> .
@prefix joseki: <http://joseki.org/2003/07/configuration#> .

<> rdfs:comment "Server configuration and data source mapping".

## Server configuration

<>  a   joseki:JosekiServer ;
    joseki:josekiSchema      joseki: ;
    joseki:alsoInclude       <file:etc/joseki-defs.n3> ;
    # Default content type if the client request does not
    # specify one exactly.
    # joseki:useContentType    "application/rdf+xml" ;
    
    joseki:useContentType    "application/n3" ;

    ## Server debug:
    # 1 - Must ask for exact MIME type else get text/plain
    #     (i.e. from a web browser)
    #     NB Browsers sniff the content anyway!
    #     Try setting useContentType to "application/n3"
    # 2 - HTTP GET responses are set no cache.
    # Same as "--debug" to the rdfserver script.

    joseki:serverDebug       "true" ;
    .

# http://server/ is a local convention to help write portable 
# configuration files. The external URL will be
#
#  http://host/webapp/servletpath/model
#
# where the "webapp/" part if null if it is the root web application
# as is used by the standalone server. In the default setup "servletpath/"
# is null as well because web.xml # contains 
#   <url-pattern>/*</url-pattern>
#
# "model" can be path.
#
# Examples:

# For the standalone server:
# External:
#   http://example.org:2020/books
# Config:
#   http://server/books
#
# Under Tomcat:
# External: 
#   http://example.org:2020/joseki/books
# Config:
#   http://server/books

## <http://server/testdata>
##     a   joseki:AttachedModel ;
##     joseki:attachedModel        <file:Data/test_data.n3> ;
##     joseki:hasQueryOperation    joseki:BindingGET ;
##     joseki:hasQueryOperation    joseki:BindingFetchClosure ;
##     joseki:hasQueryOperation    joseki:BindingRDQL ;
##     joseki:hasQueryOperation    joseki:BindingSPO ;
##     # Allow query over POST
##     joseki:hasOperation         joseki:BindingQueryModel ;
##     joseki:isImmutable			"true" ;
##     # Not pingable
##     joseki:namespacePrefix
##         [ joseki:prefix "jd" ; joseki:nsURI <http://jena/> ] ;
##     rdfs:comment "Test data" ;
##     .

## <http://server/empty>
##     a   joseki:AttachedModel ;
##     joseki:attachedModel        <file:Data/Test/empty.nt> ;
##     joseki:hasQueryOperation    joseki:BindingRDQL ;
##     joseki:hasQueryOperation    joseki:BindingSPARQL ;
##     joseki:hasQueryOperation    joseki:BindingGET ;
##     joseki:hasOperation         joseki:BindingQueryModel ;
##     joseki:hasOperation         joseki:BindingAdd ;
##     # Define the operation completely inline
##     joseki:hasOperation
##         [ joseki:operationName "ping" ; 
##           module:interface      joseki:OpPing ;
##           module:implementation
##             [ module:className
##                   "org.joseki.server.processors.PingProcessor" ]
##         ] ;
##     rdfs:comment "Initially empty model" ;
##     .
## 
<http://server/books>
    a   joseki:AttachedModel ;
    joseki:attachedModel        <file:Data/books.n3> ;
    joseki:hasQueryOperation    joseki:BindingFetchClosure ;
##     joseki:hasQueryOperation    joseki:BindingRDQL ;
    joseki:hasQueryOperation    joseki:BindingSPARQL ;
##     joseki:hasQueryOperation    joseki:BindingSPO ;
    joseki:hasQueryOperation    joseki:BindingGET ;
    rdfs:comment "A collection of book details" ;
    .

# Local Variables:
# tab-width: 4
# indent-tabs-mode: nil
# End:
